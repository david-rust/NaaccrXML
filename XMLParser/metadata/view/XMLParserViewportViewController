{
    "type": "Ext.app.ViewController",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userAlias": "xmlparserviewport",
        "designer|userClassName": "XMLParserViewportViewController"
    },
    "configAlternates": {
        "designer|userAlias": "string",
        "designer|userClassName": "string"
    },
    "designerId": "c72bceba-c9fb-4b8d-9de7-e3e146159683",
    "cn": [
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "mongoQuery"
                ],
                "fn": "makeRequest",
                "implHandler": [
                    "var controller = this;",
                    "var params = {};",
                    "if(!Ext.isEmpty(mongoQuery))",
                    "{",
                    "    params.filter = mongoQuery;",
                    "}",
                    "Ext.Ajax.request({",
                    "",
                    "    url: 'http://52.90.197.198:5000/counts/',",
                    "    params:params,",
                    "    success: function(response)",
                    "    {",
                    "        var countsObj = Ext.decode(response.responseText).data;",
                    "        controller.updateCounts(countsObj);",
                    "    },",
                    "    failure: function(response)",
                    "    {",
                    "       Ext.Msg.alert(\"Failed Call: \", Ext.encode(mongoQuery));",
                    "    },",
                    "    method: \"POST\"",
                    "",
                    "",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "makeRequest",
            "designerId": "eed98c75-e0bc-4ac9-aa06-a1639e703a29"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "counts"
                ],
                "fn": "updateCounts",
                "implHandler": [
                    "var store = Ext.getStore(\"MyTreeStore\");",
                    "var controller = this;",
                    "store.each(function(record){",
                    "",
                    "    if(record.get(\"oDesc\") == null)",
                    "    {",
                    "        record.set(\"oDesc\", record.get(\"description\"));",
                    "    }",
                    "",
                    "    if(record.get(\"leaf\"))",
                    "    {",
                    "        record.set(\"description\", record.get(\"oDesc\") + \" (0)\");",
                    "    }",
                    "    record.commit();",
                    "",
                    "});",
                    "",
                    "//Ext.getStore(\"sex\").removeAll();",
                    "//Ext.getStore(\"primarySite\").removeAll();",
                    "this.getView().down(\"#pie1\").getStore().removeAll();",
                    "this.getView().down(\"#pie2\").getStore().removeAll();",
                    "this.getView().down(\"#pie3\").getStore().removeAll();",
                    "this.getView().down(\"#col1\").getStore().removeAll();",
                    "this.getView().down(\"#col2\").getStore().removeAll();",
                    "var sexArr = [];",
                    "var race1Arr = [];",
                    "var ageArr = [];",
                    "var vsArr = [];",
                    "var siteArr = [];",
                    "",
                    "",
                    "Ext.each(counts,function(item){",
                    "    store.each(function(record){",
                    "        var naaccrIdInItem = record.get(\"naaccrId\") in item ;",
                    "        var codeIsItemType = record.get(\"value\") == item[record.get(\"naaccrId\")];",
                    "        var isLT18 = record.get(\"value\") == \"18\" && item[record.get(\"naaccrId\")] == \"<18\";",
                    "        var isGT65 = record.get(\"value\") == \"65\" && item[record.get(\"naaccrId\")] == \">65\";",
                    "        var isBT18and65 = record.get(\"start\") == \"18\" && record.get(\"end\") == \"65\" && item[record.get(\"naaccrId\")] == \"18-65\";",
                    "",
                    "        if(naaccrIdInItem && (codeIsItemType || isLT18 || isGT65 || isBT18and65))",
                    "        {",
                    "            //if(!Ext.isEmpty(Ext.getStore(record.get(\"naaccrId\"))))",
                    "            if(record.get('naaccrId') == \"sex\")",
                    "            {",
                    "                sexArr.push({",
                    "                    translation: record.get(\"oDesc\"),",
                    "                    value: item[\"count\"]",
                    "",
                    "                });",
                    "            }",
                    "            if(record.get('naaccrId') == \"race1\")",
                    "            {",
                    "                race1Arr.push({",
                    "                    translation: record.get(\"oDesc\"),",
                    "                    value: item[\"count\"]",
                    "",
                    "                });",
                    "            }",
                    "            if(record.get('naaccrId') == \"vitalStatus\")",
                    "            {",
                    "                vsArr.push({",
                    "                    translation: record.get(\"oDesc\"),",
                    "                    value: item[\"count\"]",
                    "",
                    "                });",
                    "            }",
                    "            if(record.get('naaccrId') == \"ageAtDiagnosis\")",
                    "            {",
                    "                ageArr.push({",
                    "                    translation: record.get(\"oDesc\"),",
                    "                    value: item[\"count\"]",
                    "",
                    "                });",
                    "            }",
                    "",
                    "",
                    "            if(record.get('naaccrId') == \"primarySite\")",
                    "            {",
                    "                siteArr.push({",
                    "                    translation: record.get(\"oDesc\"),",
                    "                    value: item[\"count\"]",
                    "",
                    "                });",
                    "            }",
                    "",
                    "            record.set(\"description\",record.get(\"oDesc\")+\" (\"+item[\"count\"]+\")\");",
                    "            record.commit();",
                    "        }",
                    "    });",
                    "});",
                    "",
                    "function compare(a,b) {",
                    "  if (a.value > b.value)",
                    "    return -1;",
                    "  if (a.value < b.value)",
                    "    return 1;",
                    "  return 0;",
                    "}",
                    "",
                    "race1Arr.sort(compare);",
                    "siteArr.sort(compare);",
                    "",
                    "this.getView().down(\"#pie1\").getStore().add(sexArr);",
                    "this.getView().down(\"#pie2\").getStore().add(ageArr);",
                    "this.getView().down(\"#pie3\").getStore().add(vsArr);",
                    "this.getView().down(\"#col1\").getStore().add(race1Arr);",
                    "this.getView().down(\"#col2\").getStore().add(siteArr);",
                    "",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "updateCounts",
            "designerId": "c47c54a6-77c7-44ce-b1a8-30903d215953"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "mongoQuery"
                ],
                "fn": "refreshCharts",
                "implHandler": [
                    "",
                    "debugger;",
                    "var filter = \"\";",
                    "if(!Ext.isEmpty(mongoQuery)){",
                    "    filter += \"?filter=\"+mongoQuery;",
                    "}",
                    "",
                    "var comp1 = this.getView().down(\"#chart1Comp\").getEl();",
                    "var comp2 = this.getView().down(\"#chart2Comp\").getEl();",
                    "var comp3 = this.getView().down(\"#chart3Comp\").getEl();",
                    "var comp4 = this.getView().down(\"#chart4Comp\").getEl();",
                    "var comp5 = this.getView().down(\"#chart5Comp\").getEl();",
                    "var comp6 = this.getView().down(\"#chart6Comp\").getEl();",
                    "",
                    "if(!Ext.isEmpty(comp1))",
                    "    comp1.dom.src = \"http://52.90.197.198/d3graphs/trialKM.html\"+filter;",
                    "if(!Ext.isEmpty(comp2))",
                    "    comp2.dom.src = \"http://52.90.197.198/d3graphs/USMap.html\"+filter;",
                    "",
                    "if(!Ext.isEmpty(comp5))",
                    "    comp5.dom.src = \"http://52.90.197.198/d3graphs/choroplethAll.html\"+filter;",
                    "",
                    "debugger;",
                    "",
                    "/*",
                    "//var comp1 = this.getView().down(\"#chart1\").down().getEl();",
                    "var comp2 = this.getView().down(\"#chart2\").down();",
                    "var comp4 = this.getView().down(\"#chart4\").down();",
                    "",
                    "comp1.set({",
                    "    src: \"./resources/trialKM.html?cb=\"+(Math.random()*100000)+filter",
                    "});",
                    "comp2.set({",
                    "    src: \"./resources/USMap.html?cb=\"+(Math.random()*100000)+filter",
                    "});",
                    "comp4.set({",
                    "    src: \"./resources/Pie.html?cb=\"+(Math.random()*100000)+filter",
                    "});*/"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "refreshCharts",
            "designerId": "c5da79ba-bc40-4f8d-b000-d5c55e0a54cd"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "checked"
                ],
                "fn": "checkButtons",
                "implHandler": [
                    "var store = Ext.getStore(\"MyTreeStore\");",
                    "",
                    "store.each(function(record){",
                    "",
                    "    if(record.get(\"leaf\"))",
                    "    {",
                    "        record.set(\"checked\",checked);",
                    "    }",
                    "",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "checkButtons",
            "designerId": "40f267ea-9c8e-4384-90fe-6af154990fbc"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "checkChange",
                "implHandler": [
                    "var treePanel = this.getView().down(\"#xmlTreePanel\");",
                    "var rootNode = treePanel.getRootNode();",
                    "var groups = {};",
                    "var leafIndex = 0, nodeIndex=0;",
                    "var leavesChecked = 0;",
                    "//begin first and",
                    "var mongoQuery = \"{ \\\"$and\\\":[\";",
                    "var andedNodes = [];",
                    "var filter = { \"$and\":[]};",
                    "groups.patientLevel = [];",
                    "",
                    "//Tree is only two children deep, so calling eachChild twice will be sufficient to iterate through all nodes",
                    "rootNode.eachChild(function(rootChild){",
                    "",
                    "    columns = [];",
                    "    var nodeClause = \"\";",
                    "    var values = \"\";",
                    "    var valArr = [];",
                    "",
                    "    if(rootChild.hasChildNodes())",
                    "    {",
                    "        if(rootChild.getData().comparator == \"IN\")",
                    "        {",
                    "            nodeClause += \" { \\\"\"+rootChild.getData().naaccrId+ \"\\\": { \\\"$in\\\": [\";",
                    "",
                    "            rootChild.eachChild(function(leaf)",
                    "            {",
                    "                if(leaf.getData().checked)",
                    "                {",
                    "                   if(!Ext.isEmpty(values))",
                    "                   {",
                    "                        values += \", \";",
                    "                   }",
                    "                   values += \"\\\"\"+leaf.getData().value+\"\\\"\";",
                    "                   valArr.push(leaf.getData().value);",
                    "                   leavesChecked++;",
                    "                }",
                    "            });",
                    "            nodeClause += values + \"]}} \";",
                    "            if(leavesChecked === 0)",
                    "            {",
                    "                nodeClause = \"\";",
                    "            }",
                    "            else",
                    "            {",
                    "                andedNodes.push(nodeClause);",
                    "                filter[\"$and\"].push({\"$in\":valArr});",
                    "            }",
                    "            mongoQuery += nodeClause;",
                    "",
                    "",
                    "        }",
                    "        else if(rootChild.getData().comparator == \"RANGE\")",
                    "        {",
                    "            var rootChildOperand = (rootChild.getData().operand == \"OR\") ? \"\\\"$or\\\"\" : \"\\\"$and\\\"\";",
                    "            nodeClause += \"{ \"+rootChildOperand+\": [\";",
                    "            rootChild.eachChild(function(leaf)",
                    "            {",
                    "                if(leaf.getData().checked)",
                    "                {",
                    "                   if(!Ext.isEmpty(values))",
                    "                   {",
                    "                        values += \", \";",
                    "                   }",
                    "                   if(leaf.getData().comparator == \"RANGE\")",
                    "                   {",
                    "                       values += \"{ \\\"$and\\\" : [\";",
                    "                       values += \"{ \\\"\"+rootChild.getData().naaccrId +\"\\\": { \\\"$gte\\\": \"+leaf.getData().start+\"} },\";",
                    "                       values += \"{ \\\"\"+rootChild.getData().naaccrId +\"\\\": { \\\"$lt\\\": \"+leaf.getData().end+\"} }\";",
                    "                       values += \"]} \";",
                    "                       var gte = {\"$gte\":leaf.getData().start};",
                    "                       var lte = {\"$lt\":leaf.getData().end};",
                    "                       var key = rootChild.getData().naaccrId;",
                    "                       valArr.push({key:gte});",
                    "                       valArr.push({key:lte});",
                    "                   }",
                    "                   else",
                    "                   {",
                    "                       values += \" { \\\"\"+rootChild.getData().naaccrId+\"\\\": {\\\"\"+leaf.getData().comparator+\"\\\":\"+leaf.getData().value+\"}}\";",
                    "                       var okey = rootChild.getData().naaccrId;",
                    "                       var compKey = leaf.getData().comparator;",
                    "                       valArr.push({okey:{compKey:leaf.getData().value}});",
                    "                   }",
                    "                   leavesChecked++;",
                    "                }",
                    "            });",
                    "            nodeClause += values + \"]} \";",
                    "            if(leavesChecked === 0)",
                    "            {",
                    "                nodeClause = \"\";",
                    "            }",
                    "            else{",
                    "            andedNodes.push(nodeClause);",
                    "                filter[\"$and\"].push({\"$in\":valArr});",
                    "",
                    "            }",
                    "            mongoQuery += nodeClause;",
                    "        }",
                    "",
                    "        leavesChecked=0;",
                    "    }",
                    "",
                    "",
                    "",
                    "});",
                    "",
                    "",
                    "",
                    "//Close first and",
                    "mongoQuery +=\"] }\";",
                    "mongoQuery = \"{ \\\"$and\\\": [\" +andedNodes.join(\", \") +\" ]}\";",
                    "",
                    "if(mongoQuery == \"{ \\\"$and\\\": [ ]}\")",
                    "{",
                    "    mongoQuery =\"\";",
                    "}",
                    "",
                    "//Really pass mongo query to ajax request",
                    "",
                    "return mongoQuery;"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "checkChange",
            "designerId": "1a043ef3-d386-499e-9364-a91369d926c1"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "mongoQuery"
                ],
                "fn": "update",
                "implHandler": [
                    "",
                    "this.makeRequest(mongoQuery);",
                    "this.refreshCharts(mongoQuery);"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "update",
            "designerId": "43a6bd37-1cce-483e-8dee-c7dd25c42e2d"
        }
    ]
}